<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UrNot兔少椰</title>
  <subtitle>All of them are best arrangements.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="Yataomh.github.io/"/>
  <updated>2017-06-27T15:57:46.000Z</updated>
  <id>Yataomh.github.io/</id>
  
  <author>
    <name>Jenny Jiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>APP数据可视化-转</title>
    <link href="Yataomh.github.io/2017/06/27/APP%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>Yataomh.github.io/2017/06/27/APP数据可视化/</id>
    <published>2017-06-27T13:36:06.000Z</published>
    <updated>2017-06-27T15:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>如何在有限的空间内汇总图表信息</li>
<li>如何把web端关键功能模块在移动端重构</li>
<li>如何重新定义符合移动端的交互方式</li>
</ul>
<a id="more"></a>
<p>大屏幕数据内容布局到小屏幕上的注意点：</p>
<blockquote>
<ul>
<li>to b工具类产品本身就有操作难度高，逻辑复杂的特点，光是web端的操作对于很多人来说就不好上手，但web端的屏幕空间较大，展示内容多。相对于web端，移动端在展示内容上更要挑关键的、重要的进行展示。</li>
<li>手机的使用时间较碎片，并不会占据人们日常生活中很大一块时间，所以并不适合处理复杂的问题，将复杂的操作简化也是设计重点之一。</li>
<li>在数据的缓存上手机的性能比浏览器强大些，所以应该尽量减少需要从网络加载的内容，能够提炼到native的控件尽量不要从web端加载。</li>
</ul>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/25148745/27589877-814c562c-5b7f-11e7-8ac8-c23b12e56766.jpg" alt="mt1"></p>
<h3 id="1-明确目标用户和使用场景"><a href="#1-明确目标用户和使用场景" class="headerlink" title="1. 明确目标用户和使用场景"></a>1. 明确目标用户和使用场景</h3><p>曾听到过一位BI产品销售说过一句话：to c类产品需要说服的是用户，而to b类产品需要说服的是用户的老板。相对于to c产品的用户至上， to  b产品更重视商业利益。如果说产品的“好用”直接受益者是数据分析师，那么“好看”才是公司老板买单的理由，这里的“好看”不仅仅指界面的美观，更多指图表内容能否清晰地反馈有价值的信息，能否发觉内部隐藏的问题，能否为公司后期发展提供参考。<br>web端能够承载更多的功能，提供更专业的分析操作性，而移动端的特性是轻量级，灵活方便，不受时间空间等限制。对于决策层来说，为了制作一张图表在电脑前待很久的场景非常少见，大部分决策人员应该是在会议室内围着一张已经完成的报表进行讨论和分析，或者在公司以外的地方随时随地监视关键指标的变化，并作出相应的指挥与应对措施。所以，web端的重点是“编辑”，而移动端的重心应该放在“阅览”上。<br><img src="https://user-images.githubusercontent.com/25148745/27589876-814bae84-5b7f-11e7-9e5a-59cb7fff7326.jpg" alt="mt2"></p>
<hr>
<h3 id="2-关键模块提取"><a href="#2-关键模块提取" class="headerlink" title="2. 关键模块提取"></a>2. 关键模块提取</h3><p>明确了移动端的核心需求“阅览”，设计师就可以对web端需要迁移的功能作出取舍。首先，我们来看下web端的使用流程和主要功能模块：<br>一款数据分析产品一般由以下几个模块组成：数据源、数据模型、报表、仪表盘<br><img src="https://user-images.githubusercontent.com/25148745/27589879-81543874-5b7f-11e7-9d54-b19f6469dcc3.jpg" alt="mt3"><br>数据源是用来建立数据模型的，把导入的数据进行配置，形成了数据模型，然后通过数据模型中的数据字段绘制报表，把绘制完毕的各个报表拼合成仪表盘，整个流程就结束了。看上去好像很复杂，其实这和做菜的过程非常相似，数据源就是食材，数据模型对应经过处理的食材，编辑报表等同于烹饪食材，最终形成的仪表盘就和烹饪完成端上桌的食物相似。<br>由上文可知，移动端的主要需求是阅览，那么我们着重应该关注的迁移模块是web端的仪表盘。<br><img src="https://user-images.githubusercontent.com/25148745/27589874-812aeab4-5b7f-11e7-8e10-f1a4559de59c.jpg" alt="mt4"><br>web端仪表盘<br>明确了需要迁移的模块后，需要对该模块做一个布局整理<br><img src="https://user-images.githubusercontent.com/25148745/27589878-81535af8-5b7f-11e7-9aa4-606c2257cbea.jpg" alt="mt5"><br>如图所示：图表区主要用以展示报表，占用了面积最大的一块区域，用户通过这一界面来了解自己的业务情况。文件列表区用以归纳和整理各个文件层级，起到规划和导航的作用。过滤器更通俗一点的说法是筛选器，属于使用频率最高的操作之一，方便用户根据不同维度筛选出自己最需要的信息。探索功能使用频率也比较高，但对于用户来说有一定的学习成本，优先级相对低一些。还有一些常用功能辅助用户在浏览报表的过程中提高效率；比如浏览数据、刷新等等。根据web端的模块布局，我们可以尝试着结合用户的操作习惯，在移动端排列大体框架，然后在框架的基础上不断细化和完善设计。</p>
<hr>
<h3 id="3-操作手势定义"><a href="#3-操作手势定义" class="headerlink" title="3. 操作手势定义"></a>3. 操作手势定义</h3><ul>
<li>整理web端和移动端所有手势<br><img src="https://user-images.githubusercontent.com/25148745/27589875-81334e0c-5b7f-11e7-94dc-7240c32f4bad.png" alt="mt6"></li>
<li>图表分类<blockquote>
<p>数据分析师: 一般会把图表按照其表达意义来分类，比如说适合分析趋势的图、适合分析占比的图等等<br>交互设计师: 按照交互操作方式和操作区域来分类，这可以帮助我们根据不同的类别来设计不同的交互手势。</p>
</blockquote>
</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/25148745/27589880-815b6bda-5b7f-11e7-9966-7a181527c737.jpg" alt="mt7"><br>滑块选择器适用于通过一个方向的坐标系就能够定位数据项的图表<br>例如：普通柱状图、普通折线图、普通区域图等等；整个操作空间都集中在了屏幕底部，也保证了不管多小多细的数据项都能被选中。</p>
<ol>
<li>带轴的图表：<br>包含最主流的图表类型如柱状图、折线图等；覆盖图表类型最多，可操作内容也最多，交互普适性最广</li>
<li>不带轴的图表：<br>每个图表都有其个性化操作方式，普适性相对较窄</li>
<li>表格图：<br>操作少，和web端操作相似度最高，大部分手势可延用</li>
</ol>
<ul>
<li>按图表分类定义操作手势</li>
</ul>
<ol>
<li>滑块选择器<br><img src="https://user-images.githubusercontent.com/25148745/27589881-816b5dce-5b7f-11e7-88c3-aae63015f5f3.jpg" alt="mt8"></li>
<li>十字选择器<br><img src="https://user-images.githubusercontent.com/25148745/27589884-81824610-5b7f-11e7-8915-cb11b7b20653.jpg" alt="mt9"><br>十字选择器适用于无法通过一个方向的坐标系就能够定位数据项的图表<br>例如：散点图、堆叠柱状图、多折线图、多区域图等等，手指拖动十字中心选择数据项，操作区域覆盖整个屏幕。</li>
<li>三角选择器<br><img src="https://user-images.githubusercontent.com/25148745/27589883-817fa3ce-5b7f-11e7-9021-e1d184973b8d.jpg" alt="mt10"><br>不带轴图表一般都较为特殊，普适性没有带轴图表这么广，但也有一定的规律可循；三角选择器适用于饼图、南丁格尔图等</li>
<li>指针选择器<br><img src="https://user-images.githubusercontent.com/25148745/27589887-8195aa70-5b7f-11e7-84c7-e46b9851777e.jpg" alt="mt11"><br>指针选择器适用于环形图、南丁格尔环形图等</li>
<li>图例<br><img src="https://user-images.githubusercontent.com/25148745/27589885-81856ea8-5b7f-11e7-8a0f-6856d7eb5ed4.jpg" alt="mt12"><br>除了图表内的操作，用户还常常还需要通过图例查看不同颜色的数据项各自的名称，一般显示在图表上方，web端屏幕够大，一眼就能够看完，几乎不需要额外操作；但在移动端，即使忽略每个名称的字数长度，看全所有的图例也很难，在这种情况下，我们得允许用户在这个区域横向拖动操作，必要的时候还可以做些操作引导。</li>
<li>搜索面板<br><img src="https://user-images.githubusercontent.com/25148745/27589886-81928304-5b7f-11e7-96ad-b1142a0eaba0.jpg" alt="mt13"><br>探索功能面板包括一些常用的操作，比如说排序、隐藏数据项等等，在web端是通过右键激活的；但在移动端并没有右键这个操作，这个时候可以把右键替换成长按，同样能够触发面板。</li>
<li>tooltip<br><img src="https://user-images.githubusercontent.com/25148745/27589888-81a24460-5b7f-11e7-87f5-594ca525940c.jpg" alt="mt14"><br>tooltip在web端图表操作中也很常见，当用户hover在某个数据项上时，tooltip中会列出关于这个数据项的详细信息；但在移动端有一些问题，首先，移动端没有hover的操作；其次，一些数据项的详细信息内容很多，很有可能出现一个很大的浮层遮盖住大部分图表，当你在拖动滑块浏览数据信息的时候，这个浮层会随着你的滑动一直存在，影响美观。所以，我们把tooltip内的信息放到屏幕最上方展示，保证浮层不会挡住图表，如果最上方展示不下，允许横向拖动浏览完整详情。</li>
<li>表格图<br><img src="https://user-images.githubusercontent.com/25148745/27589890-81b24cca-5b7f-11e7-8429-cdae166e20d0.jpg" alt="mt15"><br>表格图的呈现在两个端十分相似，操作并不多。在移动端的展示需要注意宽高比和web端并不同，可制定一些规则保证操作方便的同时能完整浏览全部数据。</li>
</ol>
<p>综上，对比图：<br><img src="https://user-images.githubusercontent.com/25148745/27589889-81b25738-5b7f-11e7-962e-9837d427226e.jpg" alt="mt16"></p>
<p>点击查看<a href="https://www.iamue.com/19528" target="_blank" rel="external">原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;如何在有限的空间内汇总图表信息&lt;/li&gt;
&lt;li&gt;如何把web端关键功能模块在移动端重构&lt;/li&gt;
&lt;li&gt;如何重新定义符合移动端的交互方式&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="app-design" scheme="Yataomh.github.io/categories/app-design/"/>
    
    
      <category term="app" scheme="Yataomh.github.io/tags/app/"/>
    
      <category term="data visualization" scheme="Yataomh.github.io/tags/data-visualization/"/>
    
  </entry>
  
  <entry>
    <title>移动端表单设计-转</title>
    <link href="Yataomh.github.io/2017/06/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%A1%A8%E5%8D%95%E8%AE%BE%E8%AE%A1/"/>
    <id>Yataomh.github.io/2017/06/26/移动端表单设计/</id>
    <published>2017-06-26T14:43:30.000Z</published>
    <updated>2017-06-27T15:57:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何才能让用户高效的填写表单呢？除了让表单看起来更美一些，高效的完成是表单设计的主要目标。</p>
<a id="more"></a>
<h3 id="1-使用分离控件"><a href="#1-使用分离控件" class="headerlink" title="1. 使用分离控件"></a>1. 使用分离控件</h3><p>一个单选项可能含有2-5个备选项，尽量使用分离控件。这样所有的选项是可见的，同时用户可以快速的做出选择。<br><img src="https://user-images.githubusercontent.com/25148745/27546154-9089347c-5ac4-11e7-8bb7-53bc299f4b04.png" alt="mt1"></p>
<h3 id="2-将多个下拉列表变为单一下拉列表"><a href="#2-将多个下拉列表变为单一下拉列表" class="headerlink" title="2. 将多个下拉列表变为单一下拉列表"></a>2. 将多个下拉列表变为单一下拉列表</h3><p>在日期选择时，通常含有3个部分，年、月、日，如果使用每一个数据的选择要至少3步，点击-选择-确定，那么就会产生9步操作。如果使用单一下拉列表则只需5步，点击-选择年-选择月-选择日-确定。<br><img src="https://user-images.githubusercontent.com/25148745/27546155-9092192a-5ac4-11e7-8d1b-381ab456591e.png" alt="mt2"></p>
<h3 id="3-使用开关控件"><a href="#3-使用开关控件" class="headerlink" title="3. 使用开关控件"></a>3. 使用开关控件</h3><p>如果下拉列表只有两个选项，例如“显示”和“隐藏”。如果使用下拉列表，意味着复杂的交互，使用开关按钮或单选框即可减少额外的步骤。<br><img src="https://user-images.githubusercontent.com/25148745/27546156-9094de44-5ac4-11e7-80f0-7100223f7300.png" alt="mt3"></p>
<h3 id="4-选择滑动条"><a href="#4-选择滑动条" class="headerlink" title="4. 选择滑动条"></a>4. 选择滑动条</h3><p>在选择一个值或一个范围时，考虑使用滑动条将单调的下拉列表里变成扫描性更强的页面。<br><img src="https://user-images.githubusercontent.com/25148745/27546157-90bf2190-5ac4-11e7-95f9-8505fbff929a.png" alt="mt4"></p>
<h3 id="5-避免使用多列显示"><a href="#5-避免使用多列显示" class="headerlink" title="5. 避免使用多列显示"></a>5. 避免使用多列显示</h3><p>在小尺寸的屏幕上，物理边界的限制使得单列显示更容易被用户聚焦，从而避免漏项。<br><img src="https://user-images.githubusercontent.com/25148745/27546159-90c1474a-5ac4-11e7-89bf-7076daea46fb.png" alt="mt5"></p>
<h3 id="6-使用步进设计"><a href="#6-使用步进设计" class="headerlink" title="6. 使用步进设计"></a>6. 使用步进设计</h3><p>单用户对数值进行微调时，使用步进设计代替输入框和下拉列表，既可以降低操作失误率，进而一定程度上减少点击次数。<br><img src="https://user-images.githubusercontent.com/25148745/27546161-90c8c7ae-5ac4-11e7-8ccd-4ad18821d2c2.png" alt="mt6"></p>
<h3 id="7-分条提示错误而不是“打包”设计"><a href="#7-分条提示错误而不是“打包”设计" class="headerlink" title="7. 分条提示错误而不是“打包”设计"></a>7. 分条提示错误而不是“打包”设计</h3><p>在屏幕上邻近选项提示错误。绝大多是情况下，屏幕焦点区域不是表单的顶部和底部，所以要将用户目光吸引到正确的位置。在邻近选项的位置提示错误而不是将所有错误集中显示。<br><img src="https://user-images.githubusercontent.com/25148745/27546160-90c7c480-5ac4-11e7-8a55-e6650dc52b3c.png" alt="mt7"></p>
<h3 id="8-不要重复标记必填项"><a href="#8-不要重复标记必填项" class="headerlink" title="8. 不要重复标记必填项"></a>8. 不要重复标记必填项</h3><p>尽量不显示非必填项可以让表单看起来更简洁，同时减少用户表单输入负担。但非必填项不需显示时，可以异化显示，而不是在必选项上不断重复“*”。<br><img src="https://user-images.githubusercontent.com/25148745/27546162-90c90322-5ac4-11e7-9583-bbbc40440e38.png" alt="mt8"></p>
<h3 id="9-打包相关选项"><a href="#9-打包相关选项" class="headerlink" title="9. 打包相关选项"></a>9. 打包相关选项</h3><p>将有联系的选项打包可以帮助用户扫描选项，快速找到选项。同时将冗长的表单分割成几个部分可以提高用户的完成率。<br><img src="https://user-images.githubusercontent.com/25148745/27546163-90cb217a-5ac4-11e7-8fb5-17bda25ff5c8.png" alt="mt9"></p>
<h3 id="10-合适的点击区域"><a href="#10-合适的点击区域" class="headerlink" title="10. 合适的点击区域"></a>10. 合适的点击区域</h3><p>不要将点击按钮或区域设计的过小。用户不是使用鼠标点击，而是使用手指，不能做到绝对精确，所以需要设计大小合适的点击区域。<br><img src="https://user-images.githubusercontent.com/25148745/27546164-90eea50a-5ac4-11e7-8ed2-3dbc50c427c9.png" alt="mt10"></p>
<h3 id="11-忠于平台"><a href="#11-忠于平台" class="headerlink" title="11. 忠于平台"></a>11. 忠于平台</h3><p>无论是移动设备还是app的设计都需要使用对应平台的规则。使用用户熟悉的交互方式和UI设计。无论是iOS、Android还是Windows Phone，用户希望在同一个平台使用任何app都有同样的后退按钮。</p>
<p>点击查看<a href="https://www.iamue.com/19263" target="_blank" rel="external">原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何才能让用户高效的填写表单呢？除了让表单看起来更美一些，高效的完成是表单设计的主要目标。&lt;/p&gt;
    
    </summary>
    
      <category term="app-design" scheme="Yataomh.github.io/categories/app-design/"/>
    
    
      <category term="app" scheme="Yataomh.github.io/tags/app/"/>
    
      <category term="form design" scheme="Yataomh.github.io/tags/form-design/"/>
    
  </entry>
  
  <entry>
    <title>My First Blog</title>
    <link href="Yataomh.github.io/2017/06/25/My-First-Blog/"/>
    <id>Yataomh.github.io/2017/06/25/My-First-Blog/</id>
    <published>2017-06-25T10:16:51.000Z</published>
    <updated>2017-06-25T12:34:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>希望你有高跟鞋也有跑鞋，喝茶也喝酒。希望你有勇敢的朋友，有牛逼的对手。希望你对过往一切情深意重但从不回头。希望你对想要的未来抵死执着但当下却无急迫神色。希望你特别敢，特别美，特别温柔特别狠。<br>——写给自己</p>
<a id="more"></a>
<p>Nice to meet u, my beloved!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;希望你有高跟鞋也有跑鞋，喝茶也喝酒。希望你有勇敢的朋友，有牛逼的对手。希望你对过往一切情深意重但从不回头。希望你对想要的未来抵死执着但当下却无急迫神色。希望你特别敢，特别美，特别温柔特别狠。&lt;br&gt;——写给自己&lt;/p&gt;
    
    </summary>
    
      <category term="love" scheme="Yataomh.github.io/categories/love/"/>
    
    
      <category term="first" scheme="Yataomh.github.io/tags/first/"/>
    
  </entry>
  
</feed>
